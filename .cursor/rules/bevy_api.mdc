---
alwaysApply: true
---
# Bevy API Rule

**ALWAYS verify Bevy API usage against the official documentation before suggesting code.**

## Key Points:
- Bevy's API changes frequently between versions
- Current project uses Bevy 0.16.1
- Check https://docs.rs/bevy/0.16.1/bevy/ for accurate API reference
- Don't assume struct names, function signatures, or component types
- Verify imports, system parameters, and component definitions
- When unsure about API usage, search the documentation first

## Common Issues to Avoid:
- Using outdated component names (e.g., `NodeBundle` vs `Node`, `Query::get_single_mut()`, `Query::single_mut()`, `despawn_recursive()` vs `despawn()`)
- Trying to import things that are not available (e.g. `Parent`)
- Incorrect system parameter types
- Wrong import paths (or importing things that are already in `bevy::prelude::*`)
- Non-existent functions or methods

## Relationships

Before Bevy 0.16 we only had `Parent` and `Child` components we could use to express one way relationships.

After 0.16 these were replaced with `ChildOf` and `Children` components. We got full on bidirectional relationships with the `Relationship` and `RelationshipTarget` components that we can use to create our own dynamic relationships.

```
/// This is a "relationship" component.
/// Add it to an entity that "likes" another entity.
#[derive(Component)]
#[relationship(relationship_target = LikedBy)]
struct Likes(pub Entity);

/// This is the "relationship target" component.
/// It will be automatically inserted and updated to contain
/// all entities that currently "like" this entity.
#[derive(Component, Deref)]
#[relationship_target(relationship = Likes)]
struct LikedBy(Vec<Entity>);

// Later in your app
let e1 = world.spawn_empty().id();
let e2 = world.spawn(Likes(e1)).id();
let e3 = world.spawn(Likes(e1)).id();

// e1 is liked by e2 and e3 
let liked_by = world.entity(e1).get::<LikedBy>().unwrap();
assert_eq!(&**liked_by, &[e2, e3]);
```

## An example

Previously:

```
commands.spawn(MaterialMesh2dBundle {
    mesh: meshes.add(Circle::new(100.0)).into(),
    material: materials.add(Color::srgb(7.5, 0.0, 7.5)),
    transform: Transform::from_translation(Vec3::new(-200., 0., 0.)),
    ..default()
});
```

Now:

```
commands.spawn((
    Mesh2d(meshes.add(Circle::new(100.0))),
    MeshMaterial2d(materials.add(Color::srgb(7.5, 0.0, 7.5))),
    Transform::from_translation(Vec3::new(-200., 0., 0.)),
));
```

**Rule: Before suggesting any Bevy-related code, verify the exact API in the 0.16.1 documentation.** 